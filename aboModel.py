#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.6
#  in conjunction with Tcl version 8.6
#    Sep 09, 2021 09:28:00 AM IST  platform: Windows NT

import sys
import tensorflow
from tensorflow.keras.models import model_from_json
from tensorflow.keras.models import load_model
from pathlib import Path
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import ImageTk
from PIL import Image
import tkinter.filedialog as fdbox
import tkinter.messagebox as fmsgbox

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import aboModel_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    aboModel_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    aboModel_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def loadImage(self):
        filename = fdbox.askopenfilename(filetypes=[("All files", "*.*")])
        self.Entry1.delete(0,'end')
        self.Entry1.insert(0,filename)
        # Load an image file to test, resizing it to 100x100 pixels (as required by this model)
        img = Image.open(filename)
        img = img.resize((100,100))
        img = ImageTk.PhotoImage(img)

        self.Canvas1.create_image(0,0,image=img,anchor='nw')
        self.Canvas1.image = img
    def predictImage(self):
        # These are the class labels from the training data (https://www.kaggle.com/moltean/fruits)
        class_labels = ['Apple',
                     'Banana',
                     'Orange']

        
        model=load_model('aboModelTrial_v2.h5')

        # Load an image file to test, resizing it to 100x100 pixels (as required by this model)
        img = image.load_img(self.Entry1.get(), target_size=(100, 100))
        

        # Convert the image to a numpy array
        image_to_test = image.img_to_array(img)
        
        image_to_test = image_to_test/255

        # Add a fourth dimension to the image (since Keras expects a list of images, not a single image)
        list_of_images = np.expand_dims(image_to_test, axis=0)

        # Make a prediction using the model
        results = model.predict(list_of_images)
        print(results)

        # Since we are only testing one image, we only need to check the first result
        single_result = results[0]
        print('\n')
        print(single_result)

        # We will get a likelihood score for all possible classes. Find out which class had the highest score.
        most_likely_class_index = int(np.argmax(single_result))
        class_likelihood = single_result[most_likely_class_index]

        # Get the name of the most likely class
        class_label = class_labels[most_likely_class_index]

        # Print the result
        #print("This is an image of {} - Likelihood: {:2f}".format(class_label, class_likelihood))
        self.Label1.configure(text=("This is an image of {} - Likelihood: {:2f}".format(class_label, class_likelihood)))    
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x450+660+210")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(0,  0)
        top.title("Fruit Recognizer")
        top.configure(background="#d9d9d9")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.65, rely=0.162, height=33, width=176)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Browse for image''', command=self.loadImage)

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.067, rely=0.162, height=34, relwidth=0.457)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.417, rely=0.378, relheight=0.222
                , relwidth=0.167)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.455, rely=0.667, height=33, width=56)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Predict''', command=self.predictImage)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.125, rely=0.844, height=46, width=442)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")

if __name__ == '__main__':
    vp_start_gui()





